Error: Library Compiler executable path is not set. (PT-063)
pt_shell> f
setting top_design to: 
four_bit_select_adder
pt_shell> source ../scripts/pt_quick.tcl
#set lib_dir /pkgs/synopsys/2020/32_28nm/SAED32_EDK
# Decoder ring for the libraries
# You will need to follow another example or look in the library directories to understand.
# lib_types is used for the dc/dct linking variables and ICC2 NDM lcoations.
# /pkgs/synopsys/2020/32_28nm/SAED32_EDK/lib/stdcell_hvt/db_nldm
# /          $lib_dir                   /lib/ $lib_type /db_nldm
# link_library, Target_library use the sub_lib_types and corner variables. 
# For sub_lib_types and corner:
# Example:
#     saed32hvt_ss0p75v125c.db
#     |sub_lib  corner    .db
# The current flow tries to find all sub_lib and all corners in all the search paths.  Any match will be put in the library list.
# Wild cards can be used, but be careful.  Multiple matches can occur in ways you don't want.
# For the target library, the same method is used as the link library except only HVT and RVT lib_types are used.
# ICC2 NDM choosing also uses the sub_lib_types so that only the required libraries and extras are not loaded.
set top_design four_bit_select_adder 
four_bit_select_adder
#set add_ios 0
#set pad_design 0
set rtl_list [list ./syn/rtl/$top_design.sv ]
./syn/rtl/four_bit_select_adder.sv
#set slow_corner "ss0p95v125c"
#set fast_corner "ff1p16vn40c"
#set synth_corners $slow_corner
#set slow_metal Cmax_125
#set fast_metal Cmax_125
#set lib_types "stdcell_hvt stdcell_rvt stdcell_lvt"
# Get just the main standard cells, srams and IOs
#set sub_lib_type "saed32?vt_ "
#set topdir /u/$env(USER)/PSU_RTL2GDS
#set topdir [ lindex [ regexp -inline "(.*)\(syn\|pt\|apr\)" [pwd] ] 1 ]
Information: current_design won't return any data before link (DES-071)

Loading db file '/u/amaso/Documents/ECE527/527_Project2/DCandPT/pt/work/osu05_stdcells.db'
Loading verilog file '/home/amaso/common/Documents/ECE527/527_Project2/DCandPT/pt/netlist/four_bit_select_adder.netlist'
Linking design four_bit_select_adder...
Information: 29 (74.36%) library cells are unused in library osu05_stdcells..... (LNK-045)
Information: total 29 library cells are unused (LNK-046)
Design 'four_bit_select_adder' was successfully linked.
Information: There are 50 leaf cells, ports, hiers and 44 nets in the design (LNK-047)
pt_shell> man set_clock_uncertainty
2.  Synopsys Commands                                        Command Reference
                             set_clock_uncertainty

NAME
       set_clock_uncertainty
              Specifies the uncertainty (skew) of specified clock networks.

SYNTAX
       string set_clock_uncertainty
              [-rise]
              [-fall]
              [-setup]
              [-hold]
              uncertainty
              [object_list
               -from from_clock
                 | -rise_from rise_from_clock
                 | -fall_from fall_from_clock
               -to to_clock
                 | -rise_to rise_to_clock
                 | -fall_to fall_to_clock]

   Data Types
       object_list          list
       from_clock           list
       rise_from_clock      list
       fall_from_clock      list
       rise_to_clock        list
       fall_to_clock        list
       to_clock             list
       uncertainty          float

ARGUMENTS
       -rise  Indicates that the uncertainty option applies to only the rising
              edge of the  destination  clock.  By  default,  the  uncertainty
              applies  to  both rising and falling edges. This option is valid
              only for interclock uncertainty and is now obsolete. Unless  you
              need  this  option  for backward-compatibility, use the -rise_to
              option instead.

       -fall  Indicates that  the  uncertainty  option  applies  to  only  the
              falling  edge  of  the destination clock. By default, the uncer-
              tainty applies to both rising and falling edges. This option  is
              valid  only  for  interclock  uncertainty  and  is now obsolete.
              Unless you need this option for backward-compatibility, use  the
              -fall_to option instead.

       -setup Indicates  that  the  uncertainty  option  applies only to setup
              checks.  By default, the  uncertainty  option  applies  to  both
              setup and hold checks.

       -hold  Indicates  that  the  uncertainty  option  applies  only to hold
              checks.  By default, the  uncertainty  option  applies  to  both
              setup and hold checks.

       uncertainty
              A  floating  point  number that specifies the uncertainty value.
              Typically, clock uncertainty should be positive. Negative uncer-
              tainty  values  are supported for constraining designs with com-
              plex clock relationships. Setting the  uncertainty  value  to  a
              negative  number  could  lead  to optimistic timing analysis and
              should be used with extreme care.

       -from from_clock
              Specifies the source clock for interclock uncertainty. You  must
              specify  either  the pair of the -from/-rise_from/-fall_from and
              -to/-rise_to/-fall_to, or object_list options; you cannot  spec-
              ify both.

       -rise_from rise_from_clock
              This  is the same as the -from option, but indicates that uncer-
              tainty applies only to rising edge of the source clock. You  can
              use only one of the -from, -rise_from, or -fall_from options.

       -fall_from fall_from_clock
              This  is the same as the -from option, but indicates that uncer-
              tainty applies only to falling edge of the source clock. You can
              use only one of the -from, -rise_from, or -fall_from options.

       -to to_clock
              Specifies  the destination clock for interclock uncertainty. You
              must specify either the pair of the  -from/-rise_from/-fall_from
              and  -to/-rise_to/-fall_to,  or  object_list options; you cannot
              specify both.

       -rise_to rise_to_clock
              This is the same as the -to option, but  indicates  that  uncer-
              tainty applies only to rising edge of the destination clock. You
              can use only one of the -to, -rise_to, or -fall_to options.

       -fall_to fall_to_clock
              This is the same as the -to option, but  indicates  that  uncer-
              tainty  applies  only  to falling edge of the destination clock.
              You can use only one of the -to, -rise_to, or -fall_to  options.

       object_list
              Specifies  a  list  of  clocks, ports, or pins for simple uncer-
              tainty; the uncertainty is applied either to  capturing  latches
              clocked  by one of the clocks in the object list option, or cap-
              turing latches whose clock pins are in the fanout of a  port  or
              pin specified in the object_list option. You must specify either
              the pair of the -from and -to, or object_list options; you  can-
              not specify both.

DESCRIPTION
       Specifies  the  clock  uncertainty  (skew characteristics) of specified
       clock networks. This command can specify either interclock  uncertainty
       or   simple   uncertainty.   For   interclock   uncertainty,   use  the
       -from/-rise_from/-fall_from and -to/-rise_to/-fall_to options to  spec-
       ify the source clock and the destination clock; all paths between these
       receive  the  uncertainty  value.   For  simple  uncertainty,  use  the
       object_list  option;  the  uncertainty  value  is  either  to capturing
       latches clocked by one of the clocks in the object list option, or cap-
       turing  latches  whose  clock  pins  are in the fanout of a port or pin
       specified in the object_list option.

       Set the uncertainty to the worst  skew  expected  to  the  endpoint  or
       between  the  clock  domains. You can increase the value to account for
       additional margin for setup and hold.

       For crosstalk analysis, clock uncertainty doesn't  change  the  arrival
       windows  used  in  overlap  analysis.   However,  the presence of clock
       uncertainty could change the borrow behavior in  level-sensitive  latch
       designs. Level sensitive latches may start borrowing in the presence of
       clock uncertainty leading to change in delta delays for logic nets that
       are in the fanout of affected latches.

       When you specify interclock uncertainty, ensure that you specify it for
       all possible interactions of clock domains. For example, if you specify
       paths  from  CLKA  to CLKB and CLKB to CLKA you must specify the uncer-
       tainty for both even if the values are the same. See the Examples  sec-
       tion.

       Interclock  uncertainty is more specific than simple uncertainty.  If a
       command that specifies interclock uncertainty conflicts with a  command
       that  specifies  simple  uncertainty, the command that specifies inter-
       clock uncertainty takes precedence. See the Examples section.

       If there is no applicable interclock uncertainty for a path, the  value
       for simple uncertainty is used. See the Examples section.

       To  remove  the uncertainties set by the set_clock_uncertainty command,
       use the remove_clock_uncertainty command.

       To view clock uncertainty information, use the report_clock -skew  com-
       mand.

EXAMPLES
       The  following example specifies that all paths leading to registers or
       ports clocked by CLK have setup uncertainty of  0.65  and  hold  uncer-
       tainty of 0.45.

         pt_shell> set_clock_uncertainty -setup 0.65 [get_clocks CLK]
         pt_shell> set_clock_uncertainty -hold 0.45 [get_clocks CLK]

       The  following  example specifies interclock uncertainties between PHI1
       and PHI2 clock domains.

         pt_shell> set_clock_uncertainty 0.4 -from PHI1 -to PHI1
         pt_shell> set_clock_uncertainty 0.4 -from PHI2 -to PHI2
         pt_shell> set_clock_uncertainty 1.1 -from PHI1 -to PHI2
         pt_shell> set_clock_uncertainty 1.1 -from PHI2 -to PHI1

    The following example specifies interclock uncertainties between PHI1  and
    PHI2 clock domains with specific edges.

      pt_shell> set_clock_uncertainty 0.4 -rise_from PHI1 -to PHI2
      pt_shell> set_clock_uncertainty 0.4 -fall_from PHI2 -rise_to PHI2
      pt_shell> set_clock_uncertainty 1.1 -from PHI1 -fall_to PHI2

    The  following  example  shows conflicts in the set_clock_uncertainty com-
    mands, one for simple uncertainty and one for interclock uncertainty.  The
    interclock uncertainty value of 2 takes precedence.

      pt_shell> set_clock_uncertainty 5 [get_clocks CLKA]
      pt_shell> set_clock_uncertainty 2 -from [get_clocks CLKB] -to [get_clocks CLKA]

    The following example specifies the uncertainty from CLKA to CLKB and from
    CLKB to CLKA. Notice that both must be specified even though the value  is
    the same for both.

      pt_shell> set_clock_uncertainty 2 -from [get_clocks CLKA] -to [get_clocks CLKB]
      pt_shell> set_clock_uncertainty 2 -from [get_clocks CLKB] -to [get_clocks CLKA]

    The  following example illustrates a situation in which simple uncertainty
    is used when there is no applicable interclock  uncertainty  for  a  path.
    The  first command specifies a simple uncertainty of 5 for CLKA paths, and
    the second command specifies an interclock uncertainty of 2 for paths from
    CLKB  to CLKA. If there are paths between CLKA and other clocks (for exam-
    ple, CLKC, CLKD, ...)  for  which  interclock  uncertainty  has  not  been
    specifically defined, the simple uncertainty (in this case, 5) is used.

      pt_shell> set_clock_uncertainty 5 [get_clocks CLKA]
      pt_shell> set_clock_uncertainty 2 -from [get_clocks CLKB] -to [get_clocks CLKA]

SEE ALSO
       remove_clock_uncertainty(2)
       report_clock(2)
       set_clock_latency(2)
       set_clock_transition(2)
       timing_propagate_interclock_uncertainty(3)

                            Version O-2018.06
            Copyright (c) 2018 Synopsys, Inc. All rights reserved.
pt_shell> set_clock_uncertainty 0.5 [get_clock clk]
Warning: No clock objects matched 'clk' (SEL-004)
Error: Nothing matched for clocks (SEL-005)
Error: Nothing matched for object_list (SEL-005)
0
pt_shell> set_clock_uncertainty 0.5 [get_clocks clk]
Warning: No clock objects matched 'clk' (SEL-004)
Error: Nothing matched for clocks (SEL-005)
Error: Nothing matched for object_list (SEL-005)
0
pt_shell> set_clock_uncertainty 0.5 [get_clocks CLK]
Warning: No clock objects matched 'CLK' (SEL-004)
Error: Nothing matched for clocks (SEL-005)
Error: Nothing matched for object_list (SEL-005)
0
pt_shell> report_clock -skew
****************************************
Report : clock_skew
Design : four_bit_select_adder
Version: O-2018.06
Date   : Mon Nov 20 20:44:15 2023
****************************************


1
pt_shell> set_clock_uncertainty -setup 0.5 [get_clocks clk]
Warning: No clock objects matched 'clk' (SEL-004)
Error: Nothing matched for clocks (SEL-005)
Error: Nothing matched for object_list (SEL-005)
0
pt_shell> set_clock_uncertainty -setup 0.5
Error: Must specify one of these options: clock_list, -from/-rise_from/-fall_from or -to/-rise_to/-fall_to. (CMD-004)
0
pt_shell> set_clock_uncertainty 0.5 -from A_reg -to Sum_reg
Warning: Nothing implicitly matched 'A_reg' (SEL-003)
Error: Nothing matched for from_list (SEL-005)
0
pt_shell> from_list
Error: unknown command 'from_list' (CMD-005)
pt_shell> get_ports
{"A[3]", "clk", "A[2]", "output_sum[3]", "Cin", "B[3]", "output_Cout", "A[1]", "output_sum[2]", "reset_n", "B[2]", "A[0]", "output_sum[1]", "B[1]", "output_sum[0]", "B[0]"}
pt_shell> all_inputs
{"A[3]", "clk", "A[2]", "Cin", "B[3]", "A[1]", "reset_n", "B[2]", "A[0]", "B[1]", "B[0]"}
pt_shell> all_registers
{"B_reg_reg[1]", "sum_reg_reg[1]", "Cout_reg_reg", "A_reg_reg[2]", "B_reg_reg[2]", "sum_reg_reg[2]", "A_reg_reg[0]", "A_reg_reg[3]", "B_reg_reg[0]", "B_reg_reg[3]", "sum_reg_reg[0]", "sum_reg_reg[3]", "A_reg_reg[1]"}
pt_shell> set_clock_uncertainty 0.5 [all_registers]
Warning: Collection '_sel16 (*)' has inappropriate type (cell). (SEL-002)
Error: Nothing matched for object_list (SEL-005)
0
pt_shell> set_clock_uncertainty 0.5 -from [all_registers] -to [all_registers]
Warning: Collection '_sel17 (*)' has inappropriate type (cell). (SEL-002)
Error: Nothing matched for from_list (SEL-005)
0
pt_shell> set_clock_uncertainty 0.5 {all_registers}
Warning: Nothing implicitly matched 'all_registers' (SEL-003)
Error: Nothing matched for object_list (SEL-005)
0
pt_shell> report_clocks
****************************************
Report : clock
Design : four_bit_select_adder
Version: O-2018.06
Date   : Mon Nov 20 20:55:53 2023
****************************************


No clocks in this design.

1
pt_shell> exit
Maximum memory usage for this session: 918.83 MB
CPU usage for this session: 3 seconds 
Elapsed time for this session: 1008 seconds
Diagnostics summary: 15 errors, 8 warnings, 4 informationals

Thank you for using pt_shell!

